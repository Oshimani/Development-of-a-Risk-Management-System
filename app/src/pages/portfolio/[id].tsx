import { type GetServerSideProps, type NextPage } from "next"
import Head from "next/head"
import { prisma } from "../../server/db/client"
import type { t_backtesting_results, t_portfolios, t_stocks, t_var_limit_results } from "@prisma/client"
import { Box, Card, Grid, IconButton, Stack, TextField, Typography, useTheme } from "@mui/material"
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline'
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline'
import AddIcon from '@mui/icons-material/Add'
import RemoveIcon from '@mui/icons-material/Remove'
import CloseIcon from '@mui/icons-material/Close'
import {
    Chart as ChartJS,
    LinearScale,
    TimeScale,
    BarElement,
    PointElement,
    LineElement,
    Legend,
    Tooltip,
    LineController,
    BarController,
    ChartData,
} from 'chart.js'
import { Chart } from 'react-chartjs-2'

import 'chartjs-adapter-date-fns'
import { enUS } from 'date-fns/locale'
import { DatePicker } from "@mui/x-date-pickers";

import { createAvatar } from '@dicebear/avatars'
import * as style from '@dicebear/avatars-bottts-sprites'

export const getServerSideProps: GetServerSideProps = async (context) => {
    // portfolio
    const portfolio = await prisma.t_portfolios.findFirst({ where: { id: Number(context.query.id) } })

    //  var limit
    const varLimits = await prisma.t_var_limit_results.findMany({
        where: { portfolio_id: Number(context.query.id) },
        orderBy: { date: "desc" },
        take: 1
    })
    const varLimit = {
        ...varLimits[0],
        value: varLimits[0]!.value.toNumber(),
        date: varLimits[0]!.date.toISOString()
    }

    //  backtesting data
    const backtestingData = await prisma.t_backtesting_results.findMany({
        where: { portfolio_id: Number(context.query.id) },
        orderBy: { date: "desc" },
        take: 250
    })
    //  order backtgsting data by date asceding
    backtestingData.reverse()
    const backtestingDataFormatted = backtestingData.map((data) => ({
        ...data,
        value: data.value.toNumber(),
        dailyreturns: data.dailyreturns.toNumber(),
        date: data.date.toISOString()
    }))

    // available stocks
    const availableStocks = await prisma.t_stocks.findMany({})

    return ({
        props: {
            portfolio,
            varLimit,
            backtestingData: backtestingDataFormatted,
            availableStocks
        }
    })
}

type IVarLimitResult = Omit<t_var_limit_results, "value" & "date"> & { value: number, date: string }
type IBacktestingData = Omit<t_backtesting_results, "value" | "date"> & { value: number, date: string, dailyreturns: number }

ChartJS.register(
    LinearScale,
    TimeScale,
    BarElement,
    PointElement,
    LineElement,
    Legend,
    Tooltip,
    LineController,
    BarController
);

const Portfolio: NextPage<{
    portfolio: t_portfolios,
    varLimit: IVarLimitResult,
    backtestingData: IBacktestingData[],
    availableStocks: t_stocks[]
}> = (props) => {

    const theme = useTheme()

    const data: ChartData = {
        labels: props.backtestingData.map((data) => new Date(data.date)),

        datasets: [
            {
                label: 'VaR',
                data: props.backtestingData.map((data) => data.value),
                fill: false,
                borderColor: theme.palette.error.main,
                backgroundColor: theme.palette.error.main,
                radius: 1,
                hoverRadius: 6
            },
            {
                label: "Returns",
                data: props.backtestingData.map((data) => data.dailyreturns),
                pointBorderColor: theme.palette.primary.main,
                pointBackgroundColor: theme.palette.primary.main,
                type: "scatter",
                pointRadius: 2,
                pointHoverRadius: 6
            }
        ]
    }


    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Grid container spacing={4} alignItems="stretch">
                <Grid item xs={12} sx={{ display: "flex", flexDirection: "row", alignItems: "end", gap: 1 }}>
                    <div style={{ height: 60, width: 60 }}
                        dangerouslySetInnerHTML={{ __html: createAvatar(style, { seed: props.portfolio.name }) }}></div>
                    <Typography variant="h4" flexGrow={1}>{props.portfolio.name}</Typography>

                    {/* BACK BUTTON */}
                    <IconButton title="Back to Home" href="/">
                        <CloseIcon color="error" fontSize="large" />
                    </IconButton>
                </Grid>

                {/* GRAPH */}
                <Grid item md={8}>
                    <Card sx={{ padding: 4, height: "100%", boxSizing: "border-box" }}>
                        <Typography sx={{
                            borderBottom: "solid",
                            borderBottomColor: theme.palette.primary.main,
                            borderBottomWidth: 3,
                            marginBottom: 2
                        }} variant="h2">Backtesting</Typography>
                        <Chart options={{
                            indexAxis: "x",
                            scales: {
                                x: {
                                    type: "time",
                                    adapters: {
                                        date: {
                                            locale: enUS
                                        }
                                    }
                                },
                                y: {
                                    ticks: {
                                        callback: (tickValue: string | number) => ((Number(tickValue) * 100).toFixed(2) + "%")
                                    }
                                }
                            }
                        }} type="line" data={data} />
                    </Card>
                </Grid>

                {/* LIMIT INDICATOR */}
                <Grid item md={4}>
                    <Card sx={{ padding: 4, height: "100%", boxSizing: "border-box" }}>
                        <Typography sx={{
                            borderBottom: "solid",
                            borderBottomColor: theme.palette.primary.main,
                            borderBottomWidth: 3,
                            marginBottom: 2
                        }} variant="h2">Info</Typography>

                        {/* NAV */}
                        <Stack direction="row" spacing={1}>
                            <Typography variant="body1">NAV:</Typography>
                            <Typography variant="body1" fontWeight={"bold"}>X.XXX.XXX,YYâ‚¬</Typography>
                        </Stack>

                        {/* OVERSHOOTS */}
                        <Stack direction="row" spacing={1}>
                            <Typography variant="body1">Overshoots:</Typography>
                            <Typography variant="body1" fontWeight={"bold"}>{props.backtestingData.filter(data => data.dailyreturns < data.value).length}</Typography>
                        </Stack>

                        {/* VALUE AT RISK */}
                        <Stack direction="row" spacing={1} sx={{ marginTop: 4 }}>
                            <Typography variant="body1">V@R (1d):</Typography>
                            <Typography variant="body1" fontWeight={"bold"}>{(Math.abs(props.varLimit.value / Math.sqrt(20)) * 100).toFixed(2)}%</Typography>
                        </Stack>
                        <Stack direction="row" spacing={1}>
                            <Typography variant="body1">V@R (20d):</Typography>
                            <Typography variant="body1" fontWeight={"bold"}>{(Math.abs(props.varLimit.value) * 100).toFixed(2)}%</Typography>
                        </Stack>

                        <Box sx={{ marginTop: 4, fontSize: theme.typography.h1.fontSize, display: "flex", flexDirection: "column", alignItems: "center" }}>
                            {Math.abs(props.varLimit.value) > 0.2 ?
                                <>
                                    <ErrorOutlineIcon fontSize="inherit" color="error" />
                                    <Typography fontWeight="bold" sx={{ color: theme.palette.error.main }}>Violation!</Typography>
                                    <Typography sx={{ color: theme.palette.error.main, textAlign: "center" }}>VaR for next 20 days is greater than 20%!</Typography>
                                </>
                                :
                                <>
                                    <CheckCircleOutlineIcon fontSize="inherit" color="success" />
                                    <Typography fontWeight="bold" sx={{ color: theme.palette.success.main }}>No Violation!</Typography>

                                </>

                            }
                        </Box>


                    </Card>
                </Grid>

                {/* TRADE BOOKING */}
                <Grid item xs={12}>
                    <Card sx={{ padding: 4, height: "100%", boxSizing: "border-box" }}>
                        <Typography sx={{
                            borderBottom: "solid",
                            borderBottomColor: theme.palette.primary.main,
                            borderBottomWidth: 3,
                            marginBottom: 2
                        }} variant="h2">Book Trades</Typography>
                        <Stack direction="column" spacing={2}>
                            {props.availableStocks.map(stock => (
                                <Stack key={stock.isin} direction="row" alignItems="center" spacing={1}>
                                    <Typography sx={{ flexGrow: 1 }} variant="body1" title={stock.isin}>{stock.name}</Typography>
                                    <TextField sx={{}} size="small" type="number" label="Amount" variant="standard" />
                                    <DatePicker label="Date" renderInput={(params) => <TextField {...params} size="small" variant="standard" />} value={null} onChange={() => null} />
                                    <IconButton color="success" size="small">
                                        <AddIcon />
                                    </IconButton>
                                    <IconButton color="error" size="small">
                                        <RemoveIcon />
                                    </IconButton>
                                </Stack>
                            ))
                            }
                        </Stack>
                    </Card>
                </Grid>
            </Grid>
        </>
    );
};

export default Portfolio;
