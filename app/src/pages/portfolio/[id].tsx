import { GetServerSideProps, type NextPage } from "next";
import Head from "next/head";
import { prisma } from "../../server/db/client";
import type { t_backtesting_results, t_portfolios, t_var_limit_results } from "@prisma/client";
import { Box, Button, ButtonGroup, Card, Grid, Stack, Typography, useTheme } from "@mui/material";
import ErrorOutlineIcon from '@mui/icons-material/ErrorOutline';
import CheckCircleOutlineIcon from '@mui/icons-material/CheckCircleOutline';
import {
    Chart as ChartJS,
    LinearScale,
    TimeScale,
    BarElement,
    PointElement,
    LineElement,
    Legend,
    Tooltip,
    LineController,
    BarController,
    ChartData,
    Tick,
} from 'chart.js';
import { Chart } from 'react-chartjs-2';

import 'chartjs-adapter-date-fns'
import { enUS } from 'date-fns/locale'


export const getServerSideProps: GetServerSideProps = async (context) => {
    // portfolio
    const portfolio = await prisma.t_portfolios.findFirst({ where: { id: Number(context.query.id) } })

    //  var limit
    const varLimits = await prisma.t_var_limit_results.findMany({
        where: { portfolio_id: Number(context.query.id) },
        orderBy: { date: "desc" },
        take: 1
    })
    const varLimit = {
        ...varLimits[0],
        value: varLimits[0]!.value.toNumber(),
        date: varLimits[0]!.date.toISOString()
    }

    //  backtesting data
    const backtestingData = await prisma.t_backtesting_results.findMany({
        where: { portfolio_id: Number(context.query.id) },
        orderBy: { date: "desc" },
        take: 250
    })
    //  order backtgsting data by date asceding
    backtestingData.reverse()
    const backtestingDataFormatted = backtestingData.map((data) => ({
        ...data,
        value: data.value.toNumber(),
        dailyreturns: data.dailyreturns.toNumber(),
        date: data.date.toISOString()
    }))


    return ({
        props: {
            portfolio,
            varLimit,
            backtestingData: backtestingDataFormatted
        }
    })
}

type IVarLimitResult = Omit<t_var_limit_results, "value" & "date"> & { value: number, date: string }
type IBacktestingData = Omit<t_backtesting_results, "value" | "date"> & { value: number, date: string, dailyreturns: number }

ChartJS.register(
    LinearScale,
    TimeScale,
    BarElement,
    PointElement,
    LineElement,
    Legend,
    Tooltip,
    LineController,
    BarController
);


const Portfolio: NextPage<{ portfolio: t_portfolios, varLimit: IVarLimitResult, backtestingData: IBacktestingData[] }> = (props) => {

    const theme = useTheme()
    console.log(props.backtestingData)

    const data: ChartData = {
        labels: props.backtestingData.map((data) => new Date(data.date)),

        datasets: [
            {
                label: 'VaR',
                data: props.backtestingData.map((data) => data.value),
                fill: false,
                borderColor: theme.palette.error.main,
                backgroundColor: theme.palette.error.main,
                radius: 0
            },
            {
                label: "Returns",
                data: props.backtestingData.map((data) => data.dailyreturns),
                pointBorderColor: theme.palette.primary.main,
                pointBackgroundColor: theme.palette.primary.main,
                type: "scatter",
                pointRadius: 1
            }
        ]
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Grid container spacing={8}>
                <Grid item xs={12}>
                    <Typography variant="h4">{props.portfolio.name}</Typography>
                </Grid>
                {/* GRAPH */}
                <Grid item lg={8}>
                    <Card>
                        <Chart options={{
                            responsive: true,
                            indexAxis: "x",
                            scales: {
                                x: {
                                    type: "time",
                                    adapters: {
                                        date: {
                                            locale: enUS
                                        }
                                    }

                                },
                                y: {
                                    ticks: {
                                        callback: (tickValue: string | number, index: number, ticks: Tick[]) => ((Number(tickValue)*100).toFixed(2) + "%")
                                    }
                                }
                            }
                        }} type="line" data={data} />
                    </Card>
                </Grid>

                {/* LIMIT INDICATOR */}
                <Grid item lg={4}>
                    <Stack direction="row" spacing={1}>
                        <Typography variant="body1">NAV:</Typography>
                        <Typography variant="body1" fontWeight={"bold"}>X.XXX.XXX,YYâ‚¬</Typography>
                    </Stack>
                    <Stack direction="row" spacing={1}>
                        <Typography variant="body1">VaR (20d):</Typography>
                        <Typography variant="body1" fontWeight={"bold"}>{(Math.abs(props.varLimit.value) * 100).toFixed(2)}%</Typography>
                    </Stack>

                    <Box sx={{ fontSize: theme.typography.h1.fontSize, display: "flex", flexDirection: "column", alignItems: "center" }}>
                        {Math.abs(props.varLimit.value) > 0.2 ?
                            <>
                                <ErrorOutlineIcon fontSize="inherit" color="error" />
                                <Typography fontWeight="bold" sx={{ color: theme.palette.error.main }}>Violation!</Typography>
                                <Typography sx={{ color: theme.palette.error.main }}>VaR for next 20 days is greater than 20%</Typography>
                            </>
                            :
                            <>
                                <CheckCircleOutlineIcon fontSize="inherit" color="success" />
                                <Typography fontWeight="bold" sx={{ color: theme.palette.success.main }}>No Violation!</Typography>

                            </>

                        }
                    </Box>
                </Grid>
            </Grid>
        </>
    );
};

export default Portfolio;
